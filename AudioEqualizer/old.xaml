<Window x:Class="AudioEqualizer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AudioEqualizer" xmlns:s="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="Audio Equalizer" Height="272" Width="581.781"
        DataContext="{Binding RelativeSource={RelativeSource Self}}">

    <Window.Resources>
        <SolidColorBrush x:Key="SliderThumb.Static.Foreground" Color="#FFE5E5E5"/>
        <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#FFDCECFC"/>
        <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="#FF7Eb4EA"/>
        <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="#FFDAECFC"/>
        <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="#FFEED672"/>
        <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#FFF0F0F0"/>
        <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#FFD9D9D9"/>
        <SolidColorBrush x:Key="SliderThumb.Static.Background" Color="#FFF0F0F0"/>
        <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="#FFACACAC"/>
        <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
            <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="#EED672"/>
                </Trigger>
                <Trigger Property="IsDragging" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
            <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                <Ellipse Height="18" Width="18" Fill="#FF8D8D8D">
                    <Ellipse.Effect>
                        <DropShadowEffect Color="#FF8D8D8D" BlurRadius="5" Direction="-180" ShadowDepth="2"/>
                    </Ellipse.Effect>
                </Ellipse>
            </Grid>
        </ControlTemplate>
        <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="#FFD6D6D6"/>
        <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="#FFE7EAEA"/>
        <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
            <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                <Ellipse Height="18" Width="18" Fill="#FF8D8D8D">
                    <Ellipse.Effect>
                        <DropShadowEffect Color="#FF8D8D8D" BlurRadius="5" Direction="-180" ShadowDepth="2"/>
                    </Ellipse.Effect>
                </Ellipse>
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TickBar x:Name="TopTick" Fill="#FF8D8D8D" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                    <TickBar x:Name="BottomTick" Fill="#FF8D8D8D" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>

                    <Border x:Name="TrackBackground" Margin="0,0" BorderBrush="#E0E0E0" BorderThickness="1" Background="#E0E0E0" Height="10" Grid.Row="1" VerticalAlignment="center" CornerRadius="3">
                        <Canvas Margin="-10,-1">
                            <Border x:Name="PART_SelectionRange" Margin="0,0,0,0" BorderThickness="1" BorderBrush="#EED672" Background="#EED672" Height="10" CornerRadius="3"/>
                        </Canvas>
                    </Border>

                    <Track x:Name="PART_Track" Grid.Row="1">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" Margin="0,0,5,0"/>
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" Margin="7,0,0,0"/>
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="Auto" Margin="1,0,-2,0" HorizontalAlignment="Stretch"/>
                        </Track.Thumb>
                    </Track>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="TickPlacement" Value="TopLeft">
                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                    <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}"/>
                    <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
                </Trigger>
                <Trigger Property="TickPlacement" Value="BottomRight">
                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                    <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}"/>
                    <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
                </Trigger>
                <Trigger Property="TickPlacement" Value="Both">
                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                </Trigger>
                <Trigger Property="IsSelectionRangeEnabled" Value="true">
                    <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="SliderStyle" TargetType="{x:Type Slider}">
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource SliderThumb.Static.Foreground}"/>
            <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
        </Style>
    </Window.Resources>




    <Grid RenderTransformOrigin="1.34,0.42">
        <ToolBar Height="35" VerticalAlignment="Top">
            <Button Click="ConnectCOM_ClickAsync" >
                <StackPanel Orientation="Horizontal">
                    <Ellipse Name="COMLED" Width="10" Height="10" Fill="Red"  HorizontalAlignment="Left"/>
                    <TextBlock Name="ConnectCOM">Подключиться</TextBlock>
                </StackPanel>
            </Button>
            <Separator />
            <ComboBox Name="COM_port" Foreground="DarkGray" IsReadOnly="True" Width="200" SelectedIndex="0">
                <ComboBoxItem>Выберите устройство</ComboBoxItem>
            </ComboBox>
        </ToolBar>
        <Border BorderThickness="1" Height="30" Margin="0,40,0,0" VerticalAlignment="Top" Width="244" RenderTransformOrigin="0.49,0.49" HorizontalAlignment="Center" BorderBrush="Black">
            <Border.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                    <GradientStop Color="#FF5BFFF0" Offset="1"/>
                </LinearGradientBrush>
            </Border.Background>
            <TextBox Name="VolumeLabel" TextWrapping="Wrap" Text="Громкость: 0 dB" IsReadOnly="True" FontSize="18" TextAlignment="Center" FontFamily="Comic Sans MS" Margin="9,-1" HorizontalAlignment="Center" Width="224" Height="30" SelectionBrush="Black" Foreground="Black" BorderBrush="Black" Focusable="False" ForceCursor="{DynamicResource {x:Static SystemParameters.ToolTipAnimationKey}}"/>
        </Border>
        <Slider 
            Style="{DynamicResource SliderStyle}" 
            TickFrequency="1" 
            SelectionStart="-87" 
            SelectionEnd="0" 
            Margin="0,75,0,0" 
            Minimum="-87" Maximum="0" VerticalAlignment="Top" x:Name="ValueSlider" ValueChanged="ValueSlider_ValueChanged" Padding="0" Foreground="#FF8D8D8D" HorizontalContentAlignment="Stretch" Width="554" IsSelectionRangeEnabled="True" IsSnapToTickEnabled="True"/>

        <Border BorderThickness="1" Height="30" Margin="0,104,0,0" VerticalAlignment="Top" Width="244" RenderTransformOrigin="0.49,0.49" HorizontalAlignment="Center" BorderBrush="Black">
            <Border.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                    <GradientStop Color="#FFFF5B5B" Offset="1"/>
                </LinearGradientBrush>
            </Border.Background>
            <TextBox x:Name="BassLabel" TextWrapping="Wrap" Text="Басс: 0 dB" IsReadOnly="True" FontSize="18" TextAlignment="Center" FontFamily="Comic Sans MS" Margin="9,-1" HorizontalAlignment="Center" Width="224" Height="30" BorderBrush="Black" Focusable="False" SelectionBrush="Black" ForceCursor="{DynamicResource {x:Static SystemParameters.ToolTipAnimationKey}}"/>
        </Border>
        <Slider Style="{DynamicResource SliderStyle}" TickFrequency="2" SelectionStart="0" SelectionEnd="0" Margin="0,139,0,0" Minimum="-14" Maximum="14" Value="0" VerticalAlignment="Top" x:Name="BassSlider" ValueChanged="ValueSlider_ValueChanged" Padding="0" BorderBrush="Black" Foreground="#FF8D8D8D" HorizontalContentAlignment="Stretch" Width="554" IsSelectionRangeEnabled="True" IsSnapToTickEnabled="True"/>

        <Border BorderThickness="1" Height="30" Margin="0,168,0,0" VerticalAlignment="Top" Width="244" RenderTransformOrigin="0.49,0.49" HorizontalAlignment="Center" BorderBrush="Black">
            <Border.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                    <GradientStop Color="#FFE1FF5B" Offset="1"/>
                </LinearGradientBrush>
            </Border.Background>
            <TextBox x:Name="TrebleLabel" TextWrapping="Wrap" Text="Высокие: 0 dB" IsReadOnly="True" FontSize="18" TextAlignment="Center" FontFamily="Comic Sans MS" Margin="9,-1" HorizontalAlignment="Center" Width="224" BorderBrush="Black" Focusable="False" SelectionBrush="Black" ForceCursor="{DynamicResource {x:Static SystemParameters.ToolTipAnimationKey}}"/>
        </Border>
        <Slider Style="{DynamicResource SliderStyle}" TickFrequency="2" SelectionStart="0" SelectionEnd="0" Margin="0,203,0,0" Minimum="-14" Maximum="14" VerticalAlignment="Top" x:Name="TrebleSlider" ValueChanged="ValueSlider_ValueChanged" Foreground="#FF8D8D8D" HorizontalContentAlignment="Stretch" Width="554" IsSelectionRangeEnabled="True" IsSnapToTickEnabled="True"/>
        <!--<Frame Content="Frame" HorizontalAlignment="Left" Height="6" Margin="470,90,0,0" VerticalAlignment="Top" Width="17"/>-->

    </Grid>
</Window>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.IO.Ports;
using System.Timers;
using AudioEqualizer.Models;

namespace AudioEqualizer
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private SerialPort serialPort = new SerialPort();
        private Timer updateCom = new Timer(500);

        AudioData AudioData = new AudioData();

        public MainWindow()
        {
            InitializeComponent();

            updateCom.Elapsed += Tick;
            updateCom.Start();

            COM_port.Items.Clear();
            COM_port.Items.Add("Выберите порт");

            foreach (string portName in SerialPort.GetPortNames())
            {
                COM_port.Items.Add(portName);
            }

            if (COM_port.Items.Count > 1) COM_port.SelectedItem = COM_port.Items[1];
            else COM_port.SelectedItem = COM_port.Items[0];
        }

        private void COM_port_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            if (comboBox.Items.Count == 0) return;
            if (comboBox.SelectedItem != comboBox.Items[0]) MessageBox.Show(comboBox.SelectedItem.ToString());
        }

        private void Tick(object obj, ElapsedEventArgs arg)
        {
            if (!serialPort.IsOpen)
            {
                Dispatcher.BeginInvoke(new Action(() =>
                {
                    int idxSel = -1;
                    if (COM_port.SelectedIndex != -1) idxSel = COM_port.SelectedIndex;

                    COM_port.Items.Clear();
                    COM_port.Items.Add("Выберите порт");

                    foreach (string portName in SerialPort.GetPortNames())
                    {
                        COM_port.Items.Add(portName);
                    }

                    if (idxSel < COM_port.Items.Count) COM_port.SelectedIndex = idxSel;
                    //else (idxSel != 1)
                }));
            }
        }

        private async void ConnectCOM_ClickAsync(object sender, RoutedEventArgs e)
        {
            if (!serialPort.IsOpen)
            {
                try
                {
                    serialPort.Close();
                    // настройки порта
                    serialPort.PortName = COM_port.Items[COM_port.SelectedIndex].ToString();
                    serialPort.BaudRate = 115200;
                    serialPort.ReadTimeout = -1;
                    serialPort.WriteTimeout = 2000;
                    serialPort.DtrEnable = true;
                    serialPort.Open();

                    ConnectCOM.Text = COM_port.SelectedItem.ToString();
                    ConnectCOM.Text = "Отключиться";
                    COMLED.Fill = new SolidColorBrush(System.Windows.Media.Colors.Green);
                    COM_port.IsEnabled = false;

                    await Task.Delay(2000);

                }
                catch
                {
                    serialPort.Close();
                    MessageBox.Show("ERROR: невозможно открыть порт: " + COM_port.SelectedItem.ToString());
                    return;
                }
            }
            else
            {
                //timeout_load.Stop();
                //count = 0;
                //data = new List<byte>();
                //panel_grid.Controls[0].Enabled = false;
                //avrdude_LOAD.Enabled = false;
                serialPort.Close();
                ConnectCOM.Text = "Подключиться";
                COM_port.IsEnabled = true;
                COMLED.Fill = new SolidColorBrush(System.Windows.Media.Colors.Red);
            }
        }

        private void ValueSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            var name = ((Slider)sender).Name;
            if (name == ValueSlider.Name)
            {
                ((Slider)sender).SelectionEnd = (SByte)e.NewValue;
                AudioData.Volume = (SByte)e.NewValue;
                VolumeLabel.Text = $"Громкость: {(int)e.NewValue} dB";
            }
            else if (name == BassSlider.Name || name == TrebleSlider.Name)
            {
                if (e.NewValue > 0) ((Slider)sender).SelectionEnd = (SByte)e.NewValue;
                else if (e.NewValue == 0)
                {
                    ((Slider)sender).SelectionEnd = 0;
                    ((Slider)sender).SelectionStart = 0;
                }
                else ((Slider)sender).SelectionStart = (SByte)e.NewValue;
                if (name == BassSlider.Name)
                {
                    AudioData.Bass = (SByte)e.NewValue;
                    BassLabel.Text = $"Басс: {(int)e.NewValue} dB";
                }
                else
                {
                    AudioData.Treble = (SByte)e.NewValue;
                    TrebleLabel.Text = $"Высокие: {(int)e.NewValue} dB";

                    
                }
            }
        }
    }
}
